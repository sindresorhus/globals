import fs from 'node:fs/promises';
import {outdent} from 'outdent';
import {unique, sortObject} from '../utilities.mjs';

const DATA_DIRECTORY = new URL('../data/', import.meta.url);

const readGlobals = async (environment, {ignoreNonExits} = {}) => {
	const file = new URL(`${environment}.mjs`, DATA_DIRECTORY);
	file.searchParams.set('ts', Date.now());

	let data;

	try {
		({default: data} = await import(file));
	} catch (error) {
		if (ignoreNonExits && error.code === 'ERR_MODULE_NOT_FOUND') {
			return {};
		}

		throw error;
	}

	return data;
};

const writeGlobals = async (environment, globals) => {
	const file = new URL(`${environment}.mjs`, DATA_DIRECTORY);

	const code = outdent`
		// This file is autogenerated by scripts
		// Do NOT modify this file manually

		export default ${JSON.stringify(sortObject(globals), undefined, '\t')};
	`;
	await fs.writeFile(file, code + '\n');
};

async function updateGlobals({environment, getGlobals, dry}) {
	const updated = await getGlobals();
	const original = await readGlobals(environment, {ignoreNonExits: true});

	if (!dry) {
		await writeGlobals(environment, updated);
	}

	const added = Object.keys(updated).filter(property => !Object.hasOwn(original, property));
	const removed = Object.keys(original).filter(property => !Object.hasOwn(updated, property));

	return {
		added,
		removed,
	};
}

/** This function runs in browser too, please keep it pure */
function getGlobalThisProperties() {
	const keys = [];

	for (let object = globalThis; object; object = Object.getPrototypeOf(object)) {
		keys.push(...Object.getOwnPropertyNames(object));
	}

	return keys;
}

async function createGlobals(names, {
	shouldExclude,
	isWritable = () => false,
	excludeBuiltins,
}) {
	names = unique(names);

	if (shouldExclude) {
		names = names.filter(name => !shouldExclude(name));
	}

	if (excludeBuiltins) {
		const builtinGlobals = new Set(Object.keys(await readGlobals('builtin')));

		names = names.filter(name => !builtinGlobals.has(name));
	}

	return Object.fromEntries(names.map(name => [name, isWritable(name) ?? false]));
}

export {
	readGlobals,
	updateGlobals,
	getGlobalThisProperties,
	createGlobals,
};
