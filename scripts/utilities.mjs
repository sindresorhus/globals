import fs from 'node:fs/promises';
import {outdent} from 'outdent';
import {
	DATA_DIRECTORY,
	unique,
	sortObject,
	readGlobals,
} from '../utilities.mjs';

const writeGlobals = async (environment, globals) => {
	const file = new URL(`${environment}.mjs`, DATA_DIRECTORY);

	const code = outdent`
		// This file is autogenerated by scripts
		// Do NOT modify this file manually

		export default ${JSON.stringify(sortObject(globals), undefined, '\t')};
	`;
	await fs.writeFile(file, code + '\n');
};

async function updateGlobals({
	environment,
	getGlobals,
	dryRun,
	incremental,
	excludeBuiltins,
}) {
	let updated = await getGlobals();
	const original = await readGlobals(environment, {ignoreNonExits: true});

	if (incremental) {
		updated = {...original, ...updated};
	}

	if (excludeBuiltins) {
		for (const name of Object.keys(await readGlobals('builtin'))) {
			delete updated[name];
		}
	}

	if (!dryRun) {
		await writeGlobals(environment, updated);
	}

	const added = Object.keys(updated).filter(property => !Object.hasOwn(original, property));
	const removed = Object.keys(original).filter(property => !Object.hasOwn(updated, property));

	return {
		added,
		removed,
	};
}

function getGlobalThisProperties() {
	const keys = [];

	for (
		let object = globalThis;
		object && object !== Object.prototype;
		object = Object.getPrototypeOf(object)
	) {
		keys.push(...Object.getOwnPropertyNames(object));
	}

	return keys.filter(key => key !== 'constructor');
}

async function createGlobals(names, {
	shouldExclude,
	isWritable = () => false,
}) {
	names = unique(names);

	if (shouldExclude) {
		names = names.filter(name => !shouldExclude(name));
	}

	return Object.fromEntries(names.map(name => [name, isWritable(name) ?? false]));
}

export {
	updateGlobals,
	getGlobalThisProperties,
	createGlobals,
};
