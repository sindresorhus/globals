import fs from 'node:fs/promises';
import {outdent} from 'outdent';
import {unique, sortObject} from '../utilities.mjs';

const DATA_DIRECTORY = new URL('../data/', import.meta.url);

const readGlobals = async (environment, {ignoreNonExits} = {}) => {
	const file = new URL(`${environment}.mjs`, DATA_DIRECTORY);
	file.searchParams.set('ts', Date.now());

	let data;

	try {
		({default: data} = await import(file));
	} catch (error) {
		if (ignoreNonExits && error.code === 'ERR_MODULE_NOT_FOUND') {
			return {};
		}

		throw error;
	}

	return data;
};

const writeGlobals = async (environment, globals) => {
	const file = new URL(`${environment}.mjs`, DATA_DIRECTORY);

	const code = outdent`
		// This file is autogenerated by scripts
		// Do NOT modify this file manually

		export default ${JSON.stringify(sortObject(globals), undefined, '\t')};
	`;
	await fs.writeFile(file, code + '\n');
};

async function updateGlobals(environment, updated) {
	const original = await readGlobals(environment, {ignoreNonExits: true});

	await writeGlobals(environment, updated);

	const added = Object.keys(updated).filter(property => !Object.hasOwn(original, property));
	const removed = Object.keys(original).filter(property => !Object.hasOwn(updated, property));

	console.log(
		outdent`
			âœ… ${environment} globals updated.

			Added(${added.length}):
			${added.map(property => ` - ${property}`).join('\n') || 'None'}

			Removed(${removed.length}):
			${removed.map(property => ` - ${property}`).join('\n') || 'None'}
		`,
	);
}

/** This function runs in browser too, please keep it pure */
function getGlobalThisProperties() {
	const keys = [];

	for (let object = globalThis; object; object = Object.getPrototypeOf(object)) {
		keys.push(...Object.getOwnPropertyNames(object));
	}

	return keys;
}

async function createGlobals(globals, {
	ignore = [],
	writeable,
	ignoreBuiltins = true,
}) {
	if (ignoreBuiltins) {
		const builtinGlobals = await readGlobals('builtin');
		ignore = [...ignore, ...Object.keys(builtinGlobals)];
	}

	globals = unique(globals);
	globals = globals.filter(name => !ignore.some(pattern => typeof pattern === 'string' ? pattern === name : pattern.test(name)));

	return Object.fromEntries(globals.map(name => [name, writeable?.(name) ?? false]));
}

export {
	readGlobals,
	updateGlobals,
	getGlobalThisProperties,
	createGlobals,
};
